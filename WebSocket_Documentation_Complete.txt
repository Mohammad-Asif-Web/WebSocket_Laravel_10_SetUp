====================================================================
============================ BACK-END PART ========================= --->
====================================================================
0. Web Socket only used till Laravel version 10. so Install a fresh laravel project of Laravel 10.

1. composer require beyondcode/laravel-websockets -w
--- Installing Web Sockets in laravel project.

2. php artisan vendor:publish --provider="BeyondCode\LaravelWebSockets\WebSocketsServiceProvider" --tag="migrations"
--- It will create a new table for websockets in database

3. php artisan migrate
--- After generating migration schema it create a table in database

4. php artisan vendor:publish --provider="BeyondCode\LaravelWebSockets\WebSocketsServiceProvider" --tag="config"
--- It will create two file 'websockets.php' and 'broadcasting.php' file in 'config' folder for configuration setup.

5. composer require pusher/pusher-php-server -w
--- Installing the latest pusher to laravel project, must use -w flag.

6. BROADCAST_DRIVER=pusher //env
--- Include this line of code into .env file.

================== config/broadcasting.php file updation code ===================
   'pusher' => [
      'driver' => 'pusher',
      'key' => env('PUSHER_APP_KEY'),
      'secret' => env('PUSHER_APP_SECRET'),
      'app_id' => env('PUSHER_APP_ID'),
      'options' => [
         'cluster' => env('PUSHER_APP_CLUSTER'),
         'useTLS' => false, // Set to false for local development
         'host' => '127.0.0.1',
         'port' => 6001,
         'scheme' => 'http',
      ],
      'client_options' => [
         // Guzzle client options: https://docs.guzzlephp.org/en/stable/request-options.html
      ],
   ],


================== Add this code to .env file =====================
PUSHER_APP_ID=12345
PUSHER_APP_KEY=ABCDEFG
PUSHER_APP_SECRET=HIJKLMNOP
PUSHER_APP_CLUSTER=mt1

9. php artisan websockets:serve
--- Now the websockets broadcasting will run in port 6001.

10. php artisan make:event TestData
--- Creating a new Event


====================================================================
======================= FRONT-END PART =============================
====================================================================
1. npm install
--- Installing node modules complete files, It will take time to generate.

2. npm install --save-dev laravel-echo pusher-js
--- Installing pusher-js and laravel-echo vai npm. Via laravel-echo we will broadcast the data everywhere.

======== resources/js/app.js code =========
import './bootstrap';

======== resources/js/bootstrap.js code =========

import Echo from 'laravel-echo';
import Pusher from 'pusher-js';

window.Pusher = Pusher;

window.Echo = new Echo({
    broadcaster: 'pusher',
    key: import.meta.env.VITE_PUSHER_APP_KEY,
    cluster: import.meta.env.VITE_PUSHER_APP_CLUSTER,
    wsHost: import.meta.env.VITE_PUSHER_HOST ?? `ws-${import.meta.env.VITE_PUSHER_APP_CLUSTER}.pusher.com`,
    wsPort: import.meta.env.VITE_PUSHER_PORT ?? 80,
    wssPort: import.meta.env.VITE_PUSHER_PORT ?? 443,
    forceTLS: (import.meta.env.VITE_PUSHER_SCHEME ?? 'https') === 'https',
    enabledTransports: ['ws', 'wss'],
});


5. npm run dev OR npm run production (for Live)


======= .env file code ========
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=web-socket-practice
DB_USERNAME=root
DB_PASSWORD=

BROADCAST_DRIVER=pusher

PUSHER_APP_ID=12345
PUSHER_APP_KEY=ABCDEFG
PUSHER_APP_SECRET=HIJKLMNOP
PUSHER_APP_CLUSTER=mt1

VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
VITE_PUSHER_HOST="127.0.0.1"
VITE_PUSHER_PORT="6001"
VITE_PUSHER_SCHEME="http"
VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"


====== Setting for 'vite.config.js' file =======
import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';

export default defineConfig({
    plugins: [
        laravel({
            input: ['resources/css/app.css', 'resources/js/app.js'],
            refresh: true,
        }),
    ],
});

====== Route for blade file =====
Route::get('/', function () {
    return view('welcome');
});

======= blade file code to show event live broadcast data ======
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Web Socket</title>
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>
<body>

    <div id="app">
        <h1>Laravel WebSockets</h1>
        <div id="messages"></div>
    </div>

    <!-- Ensure the Vite-built JavaScript is loaded correctly -->
    @vite('resources/js/app.js')

    <script>
        document.addEventListener('DOMContentLoaded', function() {
        Echo.channel('testDataChannel')
            .listen('TestData', (data) => {
                const messagesDiv = document.getElementById('messages');
                const messageElement = document.createElement('div');
                messageElement.textContent = data.data;
                messagesDiv.appendChild(messageElement);
            });
        });
    </script>

</body>


==========================================================
==================== SPECIAL NOTES =======================
==========================================================

==========First run this commands by separate terminals==============
1) npm run dev
2) php artisan serve
3) php artisan websockets:serve   //http://127.0.0.1:8000/laravel-websockets

=============== To show the value from Tinker ===================
->php artisan Tinker
-> event(new \App\Events\TestData('hi there'));

============== Must add js/css file from @vite ==================
@vite(['resources/css/app.css', 'resources/js/app.js'])
@vite('resources/js/app.js')

========================== JS Setting ============================
when 'DOMContentLoaded' will load properly then the inner functions will run, so all the value will be into the 'DOMContentLoaded' in javascript file.

<script>
   document.addEventListener('DOMContentLoaded', function() {
      Echo.channel('testDataChannel')
        .listen('TestData', (data) => {
            const messagesDiv = document.getElementById('messages');
            const messageElement = document.createElement('div');
            messageElement.textContent = data.data;
            messagesDiv.appendChild(messageElement);
        });
   });
</script>









<------------------ Breeze ------------------->

1. composer require laravel/breeze

2. php artisan migrate

3. php artisan breeze:install

4. npm install

5. npm run dev

6. php artisan make:event EventName

7. //update event code with private channel

8. routes/channel.php

Broadcast::channel('message-name', function ($user, $id) {
    return !is_null($user->id);
});

9. config/app.php --> uncomment the below code

        // App\Providers\BroadcastServiceProvider::class,
